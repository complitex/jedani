<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ru.complitex.jedani.worker.mapper.WorkerMapper">
    <resultMap id="workerResultMap" type="ru.complitex.jedani.worker.entity.Worker"
               extends="ru.complitex.domain.mapper.DomainMapper.domainResultMapJoin">
        <result column="left" property="left"/>
        <result column="right" property="right"/>
        <result column="level" property="level"/>
        <result column="sub_worker_count" property="subWorkerCount"/>
    </resultMap>

    <select id="selectMaxJId" resultType="string">
        select max(lpad(`text`, 6, '0')) from worker_attribute where entity_attribute_id = 1 and status = 1
    </select>

    <select id="selectIsExistJId" resultType="boolean" parameterType="map">
        select count(*) > 0 from worker_attribute wa left join worker w on wa.domain_id = w.id
            where wa.entity_attribute_id = 1 and wa.`text` = #{jId} and wa.`status` = 1
        <if test="objectId != null">and w.object_id != #{objectId}</if>
    </select>

    <sql id="selectWorkersWhereNode">
        <if test="object.left != null and object.right != null">
            and d.left > #{object.left} and #{object.right} > d.right

            <if test="filter == 'level3' and object.level != null">
                and #{object.level} + 3 > d.level
            </if>

            <if test="map.levelDepth != null and object.level != null">
                and #{object.level} + #{map.levelDepth} >= d.level
            </if>
        </if>
    </sql>

    <sql id="selectWorkersFromLogin">
        <if test="map.login != null or (sortProperty != null and sortProperty.key == 'login')">
            left join `user` u on u.id = d.parent_id
        </if>
    </sql>

    <sql id="selectWorkersWhereLogin">
        <if test="map.login != null">
            and u.login like concat('%', #{map.login}, '%')
        </if>
    </sql>

    <sql id="selectWorkersFromRegion">
        <if test="map.regionIds != null">
            left join worker_attribute wa_r on wa_r.domain_id = d.id and wa_r.entity_attribute_id = 6 and wa_r.status = 1
            left join worker_value wv_r on wv_r.attribute_id = wa_r.id
        </if>
    </sql>

    <sql id="selectWorkersWhereRegion">
        <if test="map.regionIds != null">
            and wv_r.number in (#{map.regionIds})
        </if>
    </sql>

    <sql id="selectWorkersWhere">
        <if test="map.level != null">
            and d.level = #{map.level}
        </if>
        <if test="map.subWorkersCount != null">
            and (select count(w.object_id) from worker w where w.left > (select d.left) and (select d.right) > w.right
                and w.status = 1) = #{map.subWorkersCount}
        </if>
    </sql>

    <sql id="selectWorkersSelectSort">
        <if test="sortProperty != null">
            <choose>
                <when test="sortProperty.key == 'subWorkersCount'">
                    , (select count(w.object_id) from worker w where w.left > d.left and d.right > w.right
                    and w.status = 1) sub_worker_count
                </when>
            </choose>
        </if>
    </sql>

    <sql id="selectWorkersOrderSort">
        <if test="sortProperty != null">
            <choose>
                <when test="sortProperty.key == 'login'">order by max(u.login + 0) ${asc}</when>
                <when test="sortProperty.key == 'level'">order by max(d.level) ${asc}</when>
                <when test="sortProperty.key == 'subWorkersCount'">order by max(sub_worker_count) ${asc}</when>
            </choose>
        </if>
    </sql>

    <!--suppress SqlResolve -->
    <select id="selectWorkers" parameterType="ru.complitex.common.entity.FilterWrapper" resultMap="workerResultMap">
        select d.*, '${object.entityName}' entity_name,
            (select count(w.object_id) from worker w where w.left > (select d.left) and (select d.right) > w.right
                and w.status = 1) sub_worker_count,
            <include refid="ru.complitex.domain.mapper.DomainMapper.selectDomainsSelect"/>
        from (
            select (dd.d_id) dd_id
            from (
                select d.id d_id
                <include refid="selectWorkersSelectSort"/>
                <include refid="ru.complitex.domain.mapper.DomainMapper.selectDomainsFrom"/>
                <include refid="ru.complitex.domain.mapper.DomainMapper.selectDomainsFromFilter"/>
                <include refid="ru.complitex.domain.mapper.DomainMapper.selectDomainsFromSort"/>
                <include refid="selectWorkersFromLogin"/>
                <include refid="selectWorkersFromRegion"/>
                <include refid="ru.complitex.domain.mapper.DomainMapper.selectDomainsWhere"/>
                <include refid="selectWorkersWhere"/>
                <include refid="selectWorkersWhereNode"/>
                <include refid="selectWorkersWhereLogin"/>
                <include refid="selectWorkersWhereRegion"/>
                group by d.id
                <include refid="ru.complitex.domain.mapper.DomainMapper.selectDomainsOrderSort"/>
                <include refid="selectWorkersOrderSort"/>
            ) dd
            ${limit}
        ) o
        left join worker d on d.id = o.dd_id
        left join worker_attribute a on a.domain_id = d.id and a.status = 1
        left join worker_value v on v.attribute_id = a.id
        <include refid="selectWorkersFromLogin"/>
        <include refid="ru.complitex.domain.mapper.DomainMapper.selectDomainsFromSort"/>
        group by d.id, a.id, v.id
        <include refid="ru.complitex.domain.mapper.DomainMapper.selectDomainsOrderSort"/>
        <include refid="selectWorkersOrderSort"/>
    </select>

    <!--suppress SqlResolve -->
    <select id="selectWorkersCount" parameterType="ru.complitex.common.entity.FilterWrapper" resultType="long">
        select count(distinct w.object_id) from (select d.object_id
        <include refid="ru.complitex.domain.mapper.DomainMapper.selectDomainsFrom"/>
        <include refid="ru.complitex.domain.mapper.DomainMapper.selectDomainsFromFilter"/>
        <include refid="selectWorkersFromLogin"/>
        <include refid="selectWorkersFromRegion"/>
        <include refid="ru.complitex.domain.mapper.DomainMapper.selectDomainsWhere"/>
        <include refid="selectWorkersWhere"/>
        <include refid="selectWorkersWhereNode"/>
        <include refid="selectWorkersWhereLogin"/>
        <include refid="selectWorkersWhereRegion"/>
        ) w
    </select>

    <select id="selectWorker" parameterType="long" resultMap="workerResultMap">
        <include refid="ru.complitex.domain.mapper.DomainMapper.selectDomainSql"/>
    </select>

    <select id="selectWorkersByString" parameterType="string" resultMap="workerResultMap">
        select 'worker' entity_name, w.*,
            a.id a_id, a.domain_id a_domain_id, a.entity_attribute_id a_entity_attribute_id, a.text a_text,
            a.number a_number, a.date a_date, a.start_date a_start_date, a.end_date a_end_date, a.status a_status,
            a.user_id a_user_id, 'worker' a_entity_name, v.id v_id, v.attribute_id v_attribute_id,
            v.locale_id v_locale_id, v.text v_text, v.number v_number

          from
          (select distinct (w.object_id) object_id
              from worker w

              left join worker_attribute wa_jid on w.id = wa_jid.domain_id and wa_jid.entity_attribute_id = 1 and wa_jid.status = 1

              left join worker_attribute wa_fn on w.id = wa_fn.domain_id and wa_fn.entity_attribute_id = 2 and wa_fn.status = 1
              left join first_name fn on fn.object_id = wa_fn.number and fn.status = 1
              left join first_name_attribute fn_a on fn_a.domain_id = fn.id and fn_a.entity_attribute_id = 1 and fn_a.status = 1
              left join first_name_value fn_v on fn_v.attribute_id = fn_a.id

              left join worker_attribute wa_mn on w.id = wa_mn.domain_id and wa_mn.entity_attribute_id = 3 and wa_mn.status = 1
              left join middle_name mn on mn.object_id = wa_mn.number and mn.status = 1
              left join middle_name_attribute mn_a on mn_a.domain_id = mn.id and mn_a.entity_attribute_id = 1 and mn_a.status = 1
              left join middle_name_value mn_v on mn_v.attribute_id = mn_a.id

              left join worker_attribute wa_ln on w.id = wa_ln.domain_id and wa_ln.entity_attribute_id = 4
              left join last_name ln on ln.object_id = wa_ln.number and ln.status = 1
              left join last_name_attribute ln_a on ln_a.domain_id = ln.id and ln_a.entity_attribute_id = 1 and ln_a.status = 1
              left join last_name_value ln_v on ln_v.attribute_id = ln_a.id

              where
                  <foreach collection="array" item="i" separator="and">
                      (wa_jid.text like concat('%', #{i}) or fn_v.text like concat('%', #{i}, '%') or
                      mn_v.text like concat('%', #{i}, '%') or ln_v.text like concat('%', #{i}, '%'))
                  </foreach>

              limit 10
          ) ww
          left join worker w on w.object_id = ww.object_id
          left join worker_attribute a on a.domain_id = w.id
          left join worker_value v on v.attribute_id = a.id
    </select>

    <select id="selectWorkerLevelDepth" parameterType="long" resultType="long">
        select ifnull((select max(w.level) - d.level from worker w where w.left > d.left and d.right > w.right and w.status = 1), 0)
          from worker d where d.object_id = #{objectId}
    </select>

    <insert id="insertUserHistory" parameterType="ru.complitex.jedani.worker.entity.UserHistory">
        insert into user_history (user_id, login, password, `group`, worker_id)
            value (#{userId}, #{login}, #{password}, #{group}, #{workerId})
    </insert>

</mapper>