<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="ru.complitex.domain.mapper.DomainNodeMapper">
    <resultMap id="domainNodeResultMap" type="ru.complitex.domain.entity.DomainNode">
        <id column="id" property="id"/>
        <result column="object_id" property="objectId"/>
        <result column="left" property="left"/>
        <result column="right" property="right"/>
        <result column="level" property="level"/>
        <result column="entity_name" property="entityName"/>
    </resultMap>

    <!--suppress SqlResolve -->
    <select id="selectDomainNode" parameterType="ru.complitex.domain.entity.DomainNode" resultMap="domainNodeResultMap">
        select *, '${entityName}' entity_name  from `${entityName}` where object_id = #{objectId} and `status` in (1, 4)
    </select>

    <!--suppress SqlResolve -->
    <update id="updateDomainNode" parameterType="ru.complitex.domain.entity.DomainNode">
        update `${entityName}` set `left` = #{left}, `right` = #{right}, `level` = #{level}
          where object_id = #{objectId} and `status` in (1, 4)
    </update>

    <!--suppress SqlResolve -->
    <update id="clearDomainNodeIndex" parameterType="ru.complitex.domain.entity.DomainNode">
        update ${entityName} set `right` = 0, `left` = 0, `level` = 0 where object_id >= #{objectId}
    </update>

    <!--suppress SqlResolve -->
    <select id="selectDomainNodeChildren" parameterType="ru.complitex.domain.entity.DomainNode"
            resultMap="domainNodeResultMap">
        select d.*, '${entityName}' entity_name  from `${entityName}` d
          left join ${entityName}_attribute a on a.object_id = d.object_id
        where d.status in (1, 4) and a.status = 1 and a.entity_attribute_id = #{map.parentEntityAttributeId}
          and a.number = #{objectId}
        order by d.object_id asc
    </select>

    <!--suppress SqlResolve -->
    <update id="updateDomainNodeLeft" parameterType="ru.complitex.domain.entity.DomainNode">
        update `${entityName}` set `left` = `left` + 2 where `left` >= #{right}
    </update>

    <!--suppress SqlResolve -->
    <update id="updateDomainNodeRight" parameterType="ru.complitex.domain.entity.DomainNode">
        update `${entityName}` set `right` = `right` + 2 where `right` >= #{right}
    </update>

    <!--suppress SqlResolve -->
    <select id="selectDomainNodeIds" parameterType="ru.complitex.domain.entity.DomainNode" resultType="long">
        select object_id from `${entityName}` where `left` >= #{left} and #{right} >= `right` and `status` in (1, 4)
    </select>

    <!--suppress SqlResolve -->
    <update id="updateDomainNodeMoveRight" parameterType="map">
        update `${entityName}` set `right` = `right` + #{signDelta} where `right` > #{start} and #{stop} > `right`
    </update>

    <!--suppress SqlResolve -->
    <update id="updateDomainNodeMoveLeft" parameterType="map">
        update `${entityName}` set `left` = `left` + #{signDelta} where `left` > #{start} and #{stop} > `left`
    </update>

    <!--suppress SqlResolve -->
    <update id="updateDomainNodeMove" parameterType="map">
        update `${entityName}` set `level` = `level` + #{levelMod}, `right` = `right` + #{nodeSignDelta},
          `left` = `left` + #{nodeSignDelta}
        where object_id in (<foreach collection="nodeIds" separator="," item="i">#{i}</foreach>)
    </update>

    <!--suppress SqlResolve -->
    <update id="lockTable" parameterType="list">
        lock tables <foreach collection="list" item="i" separator=",">${i} write</foreach>
    </update>

    <update id="unlockTables">
        unlock tables
    </update>


</mapper>