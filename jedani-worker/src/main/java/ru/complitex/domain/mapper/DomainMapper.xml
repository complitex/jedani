<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="ru.complitex.domain.mapper.DomainMapper">
    <resultMap id="domainResultMap" type="ru.complitex.domain.entity.Domain">
        <id column="id" property="id"/>
        <result column="object_id" property="objectId"/>
        <result column="parent_id" property="parentId"/>
        <result column="parent_entity_id" property="parentEntityId"/>
        <result column="start_date" property="startDate"/>
        <result column="end_date" property="endDate"/>
        <result column="status" property="status"/>
        <result column="permission_id" property="permissionId"/>
        <result column="external_id" property="externalId"/>
        <result column="entity_name" property="entityName"/>
        <collection column="entityName=entity_name, objectId=id" property="attributes"
                    select="ru.complitex.domain.mapper.AttributeMapper.selectAttributes"/>
    </resultMap>

    <!--suppress SqlResolve -->
    <insert id="insertDomain" parameterType="ru.complitex.domain.entity.Domain" useGeneratedKeys="false" keyProperty="id">
        insert into ${entityName} (object_id, parent_id, parent_entity_id, start_date, end_date, `status`, permission_id)
        value (#{objectId}, #{parentId}, #{parentEntityId}, #{startDate}, #{endDate}, #{status}, #{permissionId})
    </insert>

    <sql id="selectDomainSql">
        select distinct d.*, '${entityName}' entity_name from ${entityName} d
        <if test="attributes != null">
            <foreach collection="attributes" index="i" item="a">
                <if test="a.text != null or a.number != null">
                    left join ${entityName}_attribute a${i}
                    on (a${i}.object_id = d.object_id and a${i}.entity_attribute_id = #{a.entityAttributeId})
                </if>
            </foreach>
        </if>
        <where>
            <if test="parentId != null">and d.parent_id = #{parentId} and d.`end_date` is null</if>
            <if test="objectId != null">and d.object_id = #{objectId} and d.`end_date` is null</if>
            <if test="attributes != null">
                <foreach collection="attributes" index="i" item="a">
                    <if test="a.text != null">and (a${i}.text = #{a.text} and a${i}.status = 1)</if>
                    <if test="a.number != null">and (a${i}.number = #{a.number} and a${i}.status = 1)</if>
                </foreach>
            </if>
        </where>
    </sql>

    <!--suppress SqlResolve -->
    <select id="selectDomain" parameterType="ru.complitex.domain.entity.Domain" resultMap="domainResultMap">
        <include refid="selectDomainSql"/>
    </select>

    <!--suppress SqlResolve -->
    <select id="hasDomain" parameterType="ru.complitex.domain.entity.Domain" resultType="boolean">
        select count(d1.object_id) > 0 from (<include refid="selectDomainSql"/>) d1
    </select>

    <!--suppress SqlResolve -->
    <select id="selectDomainObjectId" parameterType="ru.complitex.domain.entity.Domain" resultType="long">
        select d.object_id from ${entityName} d
        <where>
            <foreach collection="attributes" item="i" separator="and">
              <foreach collection="i.values" item="j" separator="and">
                  <if test="j.text != null">
                      (a.entity_attribute_id = #{i.entityAttributeId} and v.locale_id = #{j.localeId} and v.text = #{j.text})
                  </if>
              </foreach>
            </foreach>
        </where>
        limit 1
    </select>

    <sql id="selectDomainsFromWhere">
        from ${object.entityName} d
        left join ${object.entityName}_attribute a on a.object_id = d.object_id
        left join `${object.entityName}_value` v on v.attribute_id = a.id

        <foreach collection="object.attributes" index="i" item="a">
            <if test="a.text != null or a.number != null">
                left join ${object.entityName}_attribute a${i} on a${i}.object_id = d.object_id
                left join `${object.entityName}_value` v${i} on v${i}.attribute_id = a${i}.id
            </if>
        </foreach>

        <if test="sortProperty != null">
            <if test="sortProperty.key in {'text', 'number', 'date', 'value'}">
                left join ${object.entityName}_attribute sort_a on sort_a.object_id = d.object_id and
                sort_a.entity_attribute_id = #{sortProperty.value.entityAttributeId}

                <if test="sortProperty.key == 'value'">
                    left join `${object.entityName}_value` sort_v on sort_v.attribute_id = sort_a.id
                </if>

                <if test="sortProperty.key == 'entity'">
                    -- todo
                </if>
            </if>
        </if>

        <where>
            <if test="object.objectId != null">
                <choose>
                    <when test="filter == 'equal'">
                        d.object_id = #{object.objectId}
                    </when>
                    <otherwise>
                        d.object_id like concat('%', #{object.objectId}, '%')
                    </otherwise>
                </choose>

            </if>

            <if test="object.parentId != null">
                and (d.parent_id = #{object.parentId})
            </if>

            <foreach collection="object.attributes" index="i" item="a">
                <if test="a.text != null">
                    <choose>
                        <when test="filter == 'equal'">
                            and (a${i}.entity_attribute_id = #{a.entityAttributeId} and (a${i}.text = #{a.text} or
                                v${i}.text = #{a.text}))
                        </when>
                        <otherwise>
                            and (a${i}.entity_attribute_id = #{a.entityAttributeId}
                              and (a${i}.text like concat('%', #{a.text}, '%') or v${i}.text like concat('%', #{a.text}, '%')))
                        </otherwise>
                    </choose>
                </if>

                <if test="a.number != null">
                    and (a${i}.entity_attribute_id = #{a.entityAttributeId} and (a${i}.number = #{a.number}))
                </if>
            </foreach>

            <choose>
                <when test="object.status != null">
                    and d.status = #{object.status}
                </when>
                <otherwise>
                    and d.status = 1
                </otherwise>
            </choose>
        </where>
    </sql>

    <sql id="selectDomainsFromSort">
        <if test="sortProperty != null">
            <choose>
                <when test="sortProperty.key == 'text'">, sort_a.text</when>
                <when test="sortProperty.key == 'number'">, sort_a.number</when>
                <when test="sortProperty.key == 'date'">, sort_a.date</when>
                <when test="sortProperty.key == 'value'">, sort_v.text</when>
            </choose>
        </if>
    </sql>

    <sql id="selectDomainsOrderSort">
        <if test="sortProperty != null">
            <choose>
                <when test="sortProperty.key == 'id'">order by d.id ${asc}</when>
                <when test="sortProperty.key == 'text'">order by sort_a.text ${asc}</when>
                <when test="sortProperty.key == 'number'">order by sort_a.number + 0 ${asc}</when>
                <when test="sortProperty.key == 'date'">order by sort_a.date ${asc}</when>
                <when test="sortProperty.key == 'value'">order by sort_v.text ${asc}</when>
            </choose>
        </if>
    </sql>

    <!--suppress SqlResolve -->
    <select id="selectDomains" parameterType="ru.complitex.common.entity.FilterWrapper" resultMap="domainResultMap">
        select distinct d.object_id, '${object.entityName}' entity_name, d.*
        <include refid="selectDomainsFromSort"/>
        <include refid="selectDomainsFromWhere"/>
        <include refid="selectDomainsOrderSort"/>
        ${limit}
    </select>

    <!--suppress SqlResolve -->
    <select id="selectDomainsCount" parameterType="ru.complitex.common.entity.FilterWrapper" resultType="long">
        select count(distinct d.object_id)
        <include refid="selectDomainsFromWhere"/>
    </select>

    <!--suppress SqlResolve -->
    <update id="updateDomain" parameterType="ru.complitex.domain.entity.Domain">
        update ${entityName} set `status` = #{status}
    </update>


</mapper>