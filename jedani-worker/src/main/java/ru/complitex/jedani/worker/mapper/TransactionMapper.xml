<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ru.complitex.jedani.worker.mapper.TransactionMapper">
    <resultMap id="transactionResultMap" type="ru.complitex.jedani.worker.entity.Transaction"
               extends="ru.complitex.domain.mapper.DomainMapper.domainResultMapJoin">
    </resultMap>

    <sql id="selectTransactionsFrom">
        left join transaction_attribute ta_s_from on ta_s_from.object_id = d.object_id
            and ta_s_from.entity_attribute_id = 6 and ta_s_from.status = 1
        left join transaction_attribute ta_s_to on ta_s_to.object_id = d.object_id
            and ta_s_to.entity_attribute_id = 7 and ta_s_to.status = 1
    </sql>

     <sql id="selectTransactionsWhere">
         <if test="map.storageId != null">
             and (ta_s_from.number = #{map.storageId} or ta_s_to.number = #{map.storageId})
         </if>
    </sql>

    <sql id="selectTransactionsOrderSort">
        <if test="sortProperty != null">
            <choose>
                <!--<when test="sortProperty.key == 'worker'">order by <include refid="selectTransactionsWorker"/> ${asc}</when>-->
            </choose>
        </if>
    </sql>

    <!--suppress SqlResolve -->
    <select id="selectTransactions" parameterType="ru.complitex.common.entity.FilterWrapper" resultMap="transactionResultMap">
        select d.*, '${object.entityName}' entity_name,
          <include refid="ru.complitex.domain.mapper.DomainMapper.selectDomainsSelect"/>
        from (
          select dd.object_id object_id
        from (
            select d.object_id object_id
                <include refid="ru.complitex.domain.mapper.DomainMapper.selectDomainsFrom"/>
                <include refid="ru.complitex.domain.mapper.DomainMapper.selectDomainsFromFilter"/>
                <include refid="ru.complitex.domain.mapper.DomainMapper.selectDomainsFromSort"/>
                <include refid="selectTransactionsFrom"/>
                <include refid="ru.complitex.domain.mapper.DomainMapper.selectDomainsWhere"/>
                <include refid="selectTransactionsWhere"/>
                group by d.object_id
                <include refid="ru.complitex.domain.mapper.DomainMapper.selectDomainsOrderSort"/>
                <include refid="selectTransactionsOrderSort"/>
            ) dd
            ${limit}
        ) o
        left join `transaction` d on d.object_id = o.object_id
        left join transaction_attribute a on a.object_id = d.object_id and a.status = 1
        left join transaction_value v on v.attribute_id = a.id
        <include refid="ru.complitex.domain.mapper.DomainMapper.selectDomainsFromSort"/>
        group by d.id, a.id, v.id
        <include refid="ru.complitex.domain.mapper.DomainMapper.selectDomainsOrderSort"/>
        <include refid="selectTransactionsOrderSort"/>
    </select>

    <!--suppress SqlResolve -->
    <select id="selectTransactionsCount" parameterType="ru.complitex.common.entity.FilterWrapper" resultType="long">
        select count(distinct w.object_id) from (select d.object_id
            <include refid="ru.complitex.domain.mapper.DomainMapper.selectDomainsFrom"/>
            <include refid="ru.complitex.domain.mapper.DomainMapper.selectDomainsFromFilter"/>
            <include refid="selectTransactionsFrom"/>
            <include refid="ru.complitex.domain.mapper.DomainMapper.selectDomainsWhere"/>
            <include refid="selectTransactionsWhere"/>
        ) w
    </select>
</mapper>
